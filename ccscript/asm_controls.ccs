/* ASM Code to implement a proper Run Button patch in EarthBound with CoilSnake */
import asm65816

/* Make the menu use the Start Button and the X Button */
ROM[0xC0B8E4] = "[0x00 0x50]"

/* Change the buttons used to view the party HP boxes - free the B Button, keep the Select Button */
ROM[0xC0B8F3] = byte [0] 0x20

/* Allow both the L Button and the A Button to be used for automatic interaction */
ROM[0xC0B916] = byte [0] 0xA0

/* Remove the sound when pressing the interaction Button */
ROM[0xC13C3E] = { NOP NOP NOP NOP NOP NOP NOP }

ROM[0xC094E3] = {
	JSL(burned_status) // Jump to our ASM custom subroutine
	NOP NOP
}

burned_status: {
	/* Original ASM code from the previous offset ($C094E3-$C094E8) must be included at the beginning of our custom code to avoid crashes at startup */
	LDA_y(0x125A) // Code from the original ROM. Must be included at
	STA_a(0x0A58) // the beginning of our routine or the game crashes.

	/* ASM Code for running (enabled with the B Button) */
	LDA_a(0x9840)       // LDA $9840, Load RAM offset for current Character status in accumulator for memory
	AND_i(0x00FF)       // AND #$00FF, AND accumulator operand
	CMP_i(0x0001)       // CMP #$0001, Compare accumulator with HEX value #$01 (Burnt Status)
	BNE_a(button_check) // BNE $FE12, If comparison is NOT Burnt status (#$01), branch.
	RTL                 // RTL, Return from subroutine
}

button_check: {
	LDA_a(0x0066)     // LDA $0066, Read the controller button bytes
	AND_i(0x0080)     // AND #$0080, AND accumulator operand for HEX value for B Button input
	BNE_a(run_status) // BNE $FE1E, If comparison is true, branch.
	STZ_a(0x9840)     // STZ $9840, Stores Zero to memory. Puts #$00 in RAM offset $9840 if condition is false.
	RTL               // RTL, Return from subroutine
}

run_status: {
	LDA_a(0x9840) // LDA $9840, Load RAM offset for current Character status in accumulator for memory
	ORA_i(0x0003) // ORA #$0003, OR accumulator for Skip Sandwich Status with memory.
	STA_a(0x9840) // STA $9840, Store accumulator value #$03 in memory
	RTL           // RTL, Return from subroutine
}
